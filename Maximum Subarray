# Input:[-2, 1, -3, 4, -1, 2, 1, -5, 4]
# Output:6
# Explanation: [4, -1, 2, 1] has the largest sum = 6.

#3

# Solution 1 
int maxSubArray(int * nums, int numsSize){
    // nums: [-2, 1, -3, 4, -1, 2, 1, -5, 4], numsSize: 9
    int max = nums[0];  // 目前為止最大值
    // 起點
    for (int i = 0; i < numsSize; i++) { // i: 0, 1,...,8
        // 終點
        for (int j = i; j < numsSize; j++) { // j: 0, 1,...,8
            //計算從起點到終點的和
            int sum = 0;
            for (int k = i; k <= j; k++) { // k = i, 3, 4, j
                sum += nums[k];
            }
            if (sum > max) {
                max = sum;
            }
        }
    }
    return max;
}

# Solution 2 
int maxSubArray(int * nums, int numsSize){
    // nums: [-2, 1, -3, 4, -1, 2, 1, -5, 4], numsSize: 9
    int max = nums[0];  // 目前為止最大值
    // 起點
    for (int i = 0; i < numsSize; i++) { // i: 0, 1,...,8
    
        int sum = 0;
        // 終點
        for (int j = i; j < numsSize; j++) { // j: 0, 1,...,8
            //計算從起點到終點的和
            
            sum += nums[j];     // sum 會等於這一輪的sum加上新的數字
            
            if (sum > max) {
                max = sum;
            }
        }
    }
    return max;
}
