/*
    Given a non-empty array of integers, every element appears twice except for one. Find that single one.
*/

#Input: nums = [2,2,1]
#Output: 1

#Input: nums = [4,1,2,1,2]
#Output: 4

#Input: nums = [1]
#Output: 1 

#1
int singleNumber(int* nums, int numsSize){
    // nums:[2,2,1],     numsSize:3
    // nums:[4,1,2,1,2], numsSize:5
    for (int i=0; i<numsSize; i++){       //      i : 0,1,2   //     i : 0,1,2,3,4
        printf("%d\n",nums[i]);           // nums[i]: 2,2,1   //nums[i]: 4,1,2,1,2 
        
        int count=0;                      //      i : 0       //     i : 0
                                          // nums[i]: 2       //nums[i]: 4
        for(int j=0; j<numsSize; j++){    //      j : 0,1,2   //     j : 0,1,2,3,4
            if(nums[j] == nums[i]){       // nums[j]: 2,2,1   //nums[j]: 4,1,2,1,2
                count++;                  // count  : 1,2,2(2 //count  : 1,1, 1,1,1(4
            }                             //        : 1,2,2(2 //       : 0,1,1,2,2(1
        }                                 //        : 1,1,1(1 //       : 0,0,1,1,2(2
        //count: 1                                            //       : 0,1,1,2,2(1
        if(count == 1){                                       //       : 0,0,1,1,2(2
            return nums[i];               // nums[i]: 1       //nums[i]: 4 
        }
    }
    return -1;
}

#2
int singleNumber(int* nums, int numsSize){
    // nums: [2, 2, 1], numsSize:3
    
    // n = nums[0] ^ nums[1] ^ nums[2]   // bitwise XOR
    
    //           00000000 00000000 00000000 00000110 == 2
    //        &  00000000 00000000 00000000 00000101 == 1
    //    --------------------------------------------------
    //           00000000 00000000 00000000 00000100 == 2 & 1  bitwise AND
    
    //           00000000 00000000 00000000 00000110 == 2
    //        ^  00000000 00000000 00000000 00000101 == 1
    //    --------------------------------------------------
    //           00000000 00000000 00000000 00000011 == 2 ^ 1  bitwise XOR
    
    // 1) A^A => 0
    // 2) A^0 => A
    // 3) A^B => B^A
    
    // nums : [2, 2, 1]
    //    n :  2^ 2^ 1
    //    =>   0^ 1 == 1
    
    // nums : [4, 1, 2, 1 ,2]
    //    n :  4^ 1^ 2^ 1^ 2
    //    =>   1^ 1^ 2^ 2^ 4 (can change)
    //    =>     0     0    4 
    //    =>   4
    
    int n = nums[0];
    for (int i = 1; i < numsSize; i++){
    	n ^= nums[i];
    }
    return n;
}

int main(void) {
    int input1[3] = {2, 2, 1};
    int input2[5] = {4, 1, 2, 1, 2};
    printf("%d\n", singleNumber(input1, 3));
    printf("%d\n", singleNumber(input2, 5));
    return 0;
}
