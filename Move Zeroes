# 不是0的放左邊，0放右邊，數字要保持原本順序
# Input:  [0, 1, 0, 3, 12]
# Output: [1, 3, 12, 0, 0]

# 4

# Solution 1

// 先學會檢查
// 局部修正
// 重複執行到沒有錯誤

// void: 無回傳值
void moveZeroes(int* nums, int numsSize) {
    // 倆倆比較，若左邊為0(nums[i] == 0)，右邊不為0(nums[i+1] !=0)，則尚未完成
    while (true){
      int count = 0;
      
      for (int i = 0; i+1 <numsSize; i++) { 
          if (nums[i] == 0 && nums[i+1] != 0) { 
              //交換
              count++;
              
              int t = nums[i];
              nums[i] = nums[i+1];
              nums[i+1] = t;
          }
       }
       // 利用count 計數器 結束while迴圈
       if (count == 0) {
          break;
       } 
    }
   
   return;
}

# Solution 2 

void moveZeroes(int* nums, int numsSize) {
    // nums: [0, 1, 0, 3, 12]
    //       [1, 0, 3, 12, 0]
    //       [1, 3, 12, 0, 0]
    
    // 每次完成一部分
    for (int k = 1; k <= numsSize; k++) {
         for (int i = 0; i+1 <numsSize; i++) { 
          if (nums[i] == 0 && nums[i+1] != 0) { 
              int t = nums[i];
              nums[i] = nums[i+1];
              nums[i+1] = t;
          }
       }
    }
   
   return;
}

# Solution 3 
// 直接寫答案
// 先放不是0的
// 再放是0的
void moveZeroes(int* nums, int numsSize) {
    //當i不=0，將該數指給j
   int j = 0;
   for (int i = 0; i < numsSize; i++) {
      if (nums[i] != 0) {
          nums[j] = nums[i];
          j++;
      }
   }
   
   while (j < numsSize) {
      nums[j] = 0;
      j++;
   }
   // nums: [1, 3, 12, 0, 0]
   
   return;
}
